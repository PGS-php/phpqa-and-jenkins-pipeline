#!/usr/bin/env groovy

String[] srcPaths = ["./config/", "./src/Command", "./src/Controller/", "./src/DataFixtures/", "./src/Entity/", "./src/EventSubscriber/", "./src/Form/", "./src/Migrations/", "./src/Repository/", "./src/Security/", "./src/Twig/", "./src/Utils/"]

buildDiscarder(logRotator(
    daysToKeepStr        : 14,
    artifactDaysToKeepStr: 30,
))

properties([disableConcurrentBuilds()])

node('docker') {
    ansiColor('xterm') {
        def analyse
        stage('Checkout') {
            checkout scm
            analyse = load 'analyse.groovy'
            setupSymfonyDemo("1.2.2")
        }
        stage('Pulling') {
            analyse.pull()
        }

        dir('symfony-demo') {
            stage('Install dependencies') {
                analyse.composerInstall()
            }
            stage('Install dependencies') {
                analyse.prepare()
            }
            stage("Testing") {
                parallel (
                    "PHPCodeSniffer": {
                        analyse.phpcs(srcPaths)
                    },
                    "PHPStan": {
                        analyse.phpstan(srcPaths)
                    },
                    "PhpMetrics": {
                        analyse.phpmetrics(srcPaths)
                    },
                    "PHPMessDetector": {
                        analyse.phpmd(srcPaths)
                    },
                    "PHPMagicNumberDetector": {
                        analyse.phpmnd(srcPaths)
                    },
                    "PHPCopyPasteDetector": {
                        analyse.phpcpd(srcPaths)
                    }
                )
            }
        }
    }
}

def setupSymfonyDemo(version) {
    sh "rm -rf symfony-demo* demo*"
    sh "curl -o symfony-demo.tar.gz https://codeload.github.com/symfony/demo/tar.gz/v${version}"
    sh "tar -xzf symfony-demo.tar.gz && mv demo-${version} symfony-demo"
}
